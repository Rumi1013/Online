{%- comment -%}
  Renders cart drawer with sliding animation
{%- endcomment -%}

<cart-drawer class="drawer{% if cart == empty %} is-empty{% endif %}" id="CartDrawer">
  <div id="CartDrawer-Overlay" class="cart-drawer__overlay"></div>
  <div class="drawer__inner" role="dialog" aria-modal="true" aria-label="{{ 'sections.cart.title' | t }}" tabindex="-1">
    <div class="drawer__header">
      <h2 class="drawer__heading" id="CartDrawer-Heading">{{ 'sections.cart.title' | t }}</h2>
      <button
        class="drawer__close"
        type="button"
        onclick="this.closest('cart-drawer').close()"
        aria-label="{{ 'accessibility.close' | t }}"
      >
        {% render 'icon-close' %}
      </button>
    </div>
    <cart-drawer-items
      {% if cart == empty %}
        class=" is-empty"
      {% endif %}
    >
      <div class="drawer__contents js-contents">
        {%- if cart != empty -%}
          <div class="drawer__cart-items-wrapper">
            <div class="js-contents">
              {%- for item in cart.items -%}
                <div class="cart-item" id="CartDrawer-Item-{{ item.index | plus: 1 }}">
                  <div class="cart-item__media">
                    {% if item.image %}
                      <img
                        class="cart-item__image"
                        src="{{ item.image | image_url: width: 300 }}"
                        alt="{{ item.image.alt | escape }}"
                        loading="lazy"
                        width="150"
                        height="{{ 150 | divided_by: item.image.aspect_ratio | ceil }}"
                      >
                    {% endif %}
                  </div>

                  <div class="cart-item__details">
                    {%- if settings.show_vendor -%}
                      <p class="caption-with-letter-spacing">{{ item.product.vendor }}</p>
                    {%- endif -%}

                    <a href="{{ item.url }}" class="cart-item__name h4 break">{{ item.product.title | escape }}</a>

                    {%- if item.original_price != item.final_price -%}
                      <div class="cart-item__discounted-prices">
                        <span class="visually-hidden">
                          {{ 'products.product.price.regular_price' | t }}
                        </span>
                        <s class="cart-item__old-price product-option">
                          {{- item.original_price | money -}}
                        </s>
                        <span class="visually-hidden">
                          {{ 'products.product.price.sale_price' | t }}
                        </span>
                        <strong class="cart-item__final-price product-option">
                          {{ item.final_price | money }}
                        </strong>
                      </div>
                    {%- else -%}
                      <div class="product-option">
                        {{ item.original_price | money }}
                      </div>
                    {%- endif -%}

                    {%- if item.product.has_only_default_variant == false or item.properties.size != 0 or item.selling_plan_allocation != nil -%}
                      <dl>
                        {%- if item.product.has_only_default_variant == false -%}
                          {%- for option in item.options_with_values -%}
                            <div class="product-option">
                              <dt>{{ option.name }}: </dt>
                              <dd>{{ option.value }}</dd>
                            </div>
                          {%- endfor -%}
                        {%- endif -%}

                        {%- for property in item.properties -%}
                          {%- assign property_first_char = property.first | slice: 0 -%}
                          {%- if property.last != blank and property_first_char != '_' -%}
                            <div class="product-option">
                              <dt>{{ property.first }}: </dt>
                              <dd>
                                {%- if property.last contains '/uploads/' -%}
                                  <a href="{{ property.last }}" class="link" target="_blank">
                                    {{ property.last | split: '/' | last }}
                                  </a>
                                {%- else -%}
                                  {{ property.last }}
                                {%- endif -%}
                              </dd>
                            </div>
                          {%- endif -%}
                        {%- endfor -%}
                      </dl>

                      <p class="product-option">{{ item.selling_plan_allocation.selling_plan.name }}</p>
                    {%- endif -%}

                    <div class="cart-item__quantity">
                      <div class="cart-item__quantity-wrapper">
                        <label class="visually-hidden" for="Drawer-quantity-{{ item.index | plus: 1 }}">
                          {{ 'products.product.quantity.label' | t }}
                        </label>
                        <quantity-input class="quantity">
                          <button class="quantity__button no-js-hidden" name="minus" type="button">
                            <span class="visually-hidden">
                              {{ 'products.product.quantity.decrease' | t: product: item.product.title | escape }}
                            </span>
                            {% render 'icon-minus' %}
                          </button>
                          <input
                            class="quantity__input"
                            data-quantity-variant-id="{{ item.variant.id }}"
                            type="number"
                            name="updates[]"
                            value="{{ item.quantity }}"
                            data-cart-quantity="{{ cart.item_count }}"
                            min="0"
                            data-index="{{ item.index | plus: 1 }}"
                            id="Drawer-quantity-{{ item.index | plus: 1 }}"
                            aria-label="{{ 'products.product.quantity.input_label' | t: product: item.product.title | escape }}"
                          >
                          <button class="quantity__button no-js-hidden" name="plus" type="button">
                            <span class="visually-hidden">
                              {{ 'products.product.quantity.increase' | t: product: item.product.title | escape }}
                            </span>
                            {% render 'icon-plus' %}
                          </button>
                        </quantity-input>
                      </div>
                      <div class="cart-item__error" id="CartDrawer-LineItemError-{{ item.index | plus: 1 }}" role="alert">
                        <small class="cart-item__error-text"></small>
                        <svg
                          aria-hidden="true"
                          focusable="false"
                          class="icon icon-error"
                          viewBox="0 0 13 13"
                        >
                          <circle cx="6.5" cy="6.50049" r="5.5" stroke="white" stroke-width="2"/>
                          <circle cx="6.5" cy="6.5" r="5.5" fill="#EB001B" stroke="#EB001B" stroke-width="0.7"/>
                          <path d="m5.87413 3.52832c0-0.55228 0.44772-1 1-1s1 0.44772 1 1-0.44772 1-1 1-1-0.44772-1-1zm0.72718 2.1166c0.48918-0.01259 0.73718 0.2842 0.73718 0.7154v2.8063c0 0.4312-0.24682 0.7279-0.73718 0.7154-0.49036-0.0125-0.73718-0.284-0.73718-0.7154v-2.8063c0-0.4312 0.24682-0.7279 0.73718-0.7154z" fill="white"/>
                        </svg>
                      </div>

                      <cart-remove-button
                        id="CartDrawer-Remove-{{ item.index | plus: 1 }}"
                        data-index="{{ item.index | plus: 1 }}"
                      >
                        <button
                          class="button button--tertiary"
                          aria-label="{{ 'sections.cart.remove_title' | t: title: item.title }}"
                        >
                          {% render 'icon-remove' %}
                        </button>
                      </cart-remove-button>
                    </div>
                  </div>
                </div>
              {%- endfor -%}
            </div>
          </div>
          <div class="drawer__footer">
            {%- if settings.show_cart_note -%}
              <details id="Details-CartDrawer-CartNote"  class="cart__note field">
                <summary>
                  <span class="summary__title">{{ 'sections.cart.note' | t }}</span>
                  {% render 'icon-caret' %}
                </summary>
                <cart-note class="cart__note field">
                  <label class="field__label" for="CartDrawer-Note">{{ 'sections.cart.note' | t }}</label>
                  <textarea
                    class="text-area field__input"
                    name="note"
                    form="CartDrawer-Form"
                    id="CartDrawer-Note"
                    placeholder="{{ 'sections.cart.note' | t }}"
                  >{{ cart.note }}</textarea>
                </cart-note>
              </details>
            {%- endif -%}

            <!-- Start of Subtotal -->
            <div class="cart-drawer__footer" {{ block.shopify_attributes }}>
              <div class="totals" role="status">
                <h3 class="totals__title">{{ 'sections.cart.estimated_total' | t }}</h3>
                <p class="totals__price-value">{{ cart.total_price | money_with_currency }}</p>
              </div>

              <small class="tax-note caption-large rte">
                {%- if cart.taxes_included and shop.shipping_policy.body != blank -%}
                  {{ 'sections.cart.taxes_included_and_shipping_policy_html' | t: link: shop.shipping_policy.url }}
                {%- elsif cart.taxes_included -%}
                  {{ 'sections.cart.taxes_included_but_shipping_at_checkout' | t }}
                {%- elsif shop.shipping_policy.body != blank -%}
                  {{ 'sections.cart.taxes_and_shipping_policy_at_checkout_html' | t: link: shop.shipping_policy.url }}
                {%- else -%}
                  {{ 'sections.cart.taxes_and_shipping_at_checkout' | t }}
                {%- endif -%}
              </small>
            </div>
            <!-- End of Subtotal -->

            <div class="cart__ctas" {{ block.shopify_attributes }}>
              <noscript>
                <button type="submit" class="cart__update-button button button--secondary" form="CartDrawer-Form">
                  {{ 'sections.cart.update' | t }}
                </button>
              </noscript>

              <button
                type="submit"
                id="CartDrawer-Checkout"
                class="cart__checkout-button button"
                name="add"
                form="CartDrawer-Form"
                formaction="{{ routes.cart_url }}"
              >
                {{ 'sections.cart.checkout' | t }}
              </button>
            </div>
          </div>
        {%- endif -%}
      </div>
    </cart-drawer-items>

    {%- if cart == empty -%}
      <div class="drawer__inner-empty">
        <div class="cart-drawer__warnings center{% if settings.cart_drawer_collection != blank %} cart-drawer__warnings--has-collection{% endif %}">
          <div class="cart-drawer__empty-content">
            <h2 class="cart__empty-text">{{ 'sections.cart.empty' | t }}</h2>
            <button
              class="drawer__close button button--secondary"
              type="button"
              onclick="this.closest('cart-drawer').close()"
            >
              {{ 'sections.cart.continue_shopping' | t }}
            </button>

            {%- if shop.customer_accounts_enabled and customer == null -%}
              <p class="cart__login-title h3">{{ 'sections.cart.login.title' | t }}</p>
              <p class="cart__login-paragraph">
                {{ 'sections.cart.login.paragraph_html' | t: link: routes.account_login_url }}
              </p>
            {%- endif -%}
          </div>
        </div>
      </div>
    {%- endif -%}
  </div>
</cart-drawer>

<script>
  class CartDrawer extends HTMLElement {
    constructor() {
      super();

      this.addEventListener('keyup', (evt) => evt.code === 'Escape' && this.close());
      this.querySelector('#CartDrawer-Overlay').addEventListener('click', this.close.bind(this));
      this.setHeaderCartIconAccessibility();
    }

    setHeaderCartIconAccessibility() {
      const cartLink = document.querySelector('#cart-icon-bubble');
      cartLink.setAttribute('role', 'button');
      cartLink.setAttribute('aria-haspopup', 'dialog');
      cartLink.addEventListener('click', (event) => {
        event.preventDefault();
        this.open(cartLink)
      });
      cartLink.addEventListener('keydown', (event) => {
        if (event.code.toUpperCase() === 'SPACE') {
          event.preventDefault();
          this.open(cartLink);
        }
      });
    }

    open(triggeredBy) {
      if (triggeredBy) this.setActiveElement(triggeredBy);
      const cartDrawerNote = this.querySelector('[id^="Details-"] summary');
      if (cartDrawerNote && !cartDrawerNote.hasAttribute('role')) this.setSummaryAccessibility(cartDrawerNote);
      // here the animation doesn't seem to always get triggered. A timeout seem to help
      setTimeout(() => {this.classList.add('animate', 'active')});

      this.addEventListener('transitionend', () => {
        const containerToTrapFocusOn = this.classList.contains('is-empty') ? this.querySelector('.drawer__inner-empty') : document.getElementById('CartDrawer');
        const focusElement = this.querySelector('.drawer__inner') || this.querySelector('.drawer__inner-empty');
        trapFocus(containerToTrapFocusOn, focusElement);
      }, { once: true });

      document.body.classList.add('overflow-hidden');
    }

    close() {
      this.classList.remove('active');
      removeTrapFocus(this.activeElement);
      document.body.classList.remove('overflow-hidden');
    }

    setSummaryAccessibility(cartDrawerNote) {
      cartDrawerNote.setAttribute('role', 'button');
      cartDrawerNote.setAttribute('aria-expanded', 'false');

      if(cartDrawerNote.nextElementSibling.getAttribute('id')) {
        cartDrawerNote.setAttribute('aria-controls', cartDrawerNote.nextElementSibling.id);
      }

      cartDrawerNote.addEventListener('click', (event) => {
        event.currentTarget.setAttribute('aria-expanded', !event.currentTarget.closest('details').hasAttribute('open'));
      });

      cartDrawerNote.parentElement.addEventListener('keyup', onKeyUpEscape);
    }

    renderContents(parsedState) {
      this.querySelector('.drawer__inner').classList.contains('is-empty') && this.querySelector('.drawer__inner').classList.remove('is-empty');
      this.productId = parsedState.id;
      this.getSectionsToRender().forEach((section => {
        const sectionElement = section.selector ? document.querySelector(section.selector) : document.getElementById(section.id);
        if (sectionElement) {
          sectionElement.innerHTML = this.getSectionInnerHTML(parsedState.sections[section.id], section.selector);
        }
      }));

      setTimeout(() => {
        this.querySelector('#CartDrawer-Overlay').addEventListener('click', this.close.bind(this));
        this.open();
      });
    }

    getSectionInnerHTML(html, selector) {
      return new DOMParser()
        .parseFromString(html, 'text/html')
        .querySelector(selector).innerHTML;
    }

    getSectionsToRender() {
      return [
        {
          id: 'CartDrawer-CartItems',
          selector: '#CartDrawer-CartItems .drawer__contents',
        },
        {
          id: 'cart-icon-bubble'
        }
      ];
    }

    setActiveElement(element) {
      this.activeElement = element;
    }
  }

  customElements.define('cart-drawer', CartDrawer);

  class CartDrawerItems extends HTMLElement {
    constructor() {
      super();

      this.lineItemStatusElement = document.getElementById('CartDrawer-LineItemStatus');

      const debouncedOnChange = debounce((event) => {
        this.onChange(event);
      }, 300);

      this.addEventListener('change', debouncedOnChange.bind(this));
    }

    cartUpdateUnsubscriber = undefined;

    connectedCallback() {
      this.cartUpdateUnsubscriber = subscribe(PUB_SUB_EVENTS.cartUpdate, (event) => {
        if (event.source === 'cart-drawer') {
          return;
        }
        this.onCartUpdate();
      });
    }

    disconnectedCallback() {
      if (this.cartUpdateUnsubscriber) {
        this.cartUpdateUnsubscriber();
      }
    }

    onChange(event) {
      this.updateQuantity(event.target.dataset.index, event.target.value, document.activeElement.getAttribute('name'), 'CartDrawer-Form');
    }

    onCartUpdate() {
      fetch(`${routes.cart_url}?section_id=cart-drawer`)
        .then((response) => response.text())
        .then((responseText) => {
          const html = new DOMParser().parseFromString(responseText, 'text/html');
          const selectors = ['cart-drawer-items', '[id^="CartDrawer-Item-"]'];
          for (const selector of selectors) {
            const targetElement = document.querySelector(selector);
            const sourceElement = html.querySelector(selector);
            if (targetElement && sourceElement) {
              targetElement.replaceWith(sourceElement);
            }
          }
        })
        .catch(e => {
          console.error(e);
        });
    }

    getSectionsToRender() {
      return [
        {
          id: 'CartDrawer-CartItems',
          section: 'cart-drawer',
          selector: '[data-id="CartDrawer-CartItems"]',
        },
        {
          id: 'cart-icon-bubble',
          section: 'cart-icon-bubble',
          selector: '.shopify-section'
        }
      ];
    }

    updateQuantity(line, quantity, name, formId) {
      this.enableLoading(line);

      const body = JSON.stringify({
        line,
        quantity,
        sections: this.getSectionsToRender().map((section) => section.section),
        sections_url: window.location.pathname
      });

      fetch(`${routes.cart_change_url}`, {...fetchConfig(), ...{ body }})
        .then((response) => {
          return response.text();
        })
        .then((state) => {
          const parsedState = JSON.parse(state);

          const quantityElement = document.getElementById(`Drawer-quantity-${line}`);
          const items = document.querySelectorAll('.cart-item');

          if (parsedState.errors) {
            quantityElement.value = quantityElement.getAttribute('value');
            this.updateLiveRegions(line, parsedState.errors);
            return;
          }

          this.classList.toggle('is-empty', parsedState.item_count === 0);
          const cartDrawerWrapper = document.querySelector('cart-drawer');

          if (cartDrawerWrapper) cartDrawerWrapper.classList.toggle('is-empty', parsedState.item_count === 0);

          this.getSectionsToRender().forEach((section => {
            const elementToReplace = document.getElementById(section.id).querySelector(section.selector) || document.getElementById(section.id);
            elementToReplace.innerHTML = this.getSectionInnerHTML(parsedState.sections[section.section], section.selector);
          }));

          const updatedValue = parsedState.items[line - 1] ? parsedState.items[line - 1].quantity : undefined;
          let message = '';
          if (items.length === parsedState.items.length && updatedValue !== parseInt(quantityElement.value)) {
            if (typeof updatedValue === 'undefined') {
              message = window.cartStrings.error;
            } else {
              message = window.cartStrings.quantityError.replace('[quantity]', updatedValue);
            }
          }
          this.updateLiveRegions(line, message);

          const lineItem = document.getElementById(`CartDrawer-Item-${line}`);
          if (lineItem && lineItem.querySelector(`[name="${name}"]`)) {
            cartDrawerWrapper ? trapFocus(cartDrawerWrapper, lineItem.querySelector(`[name="${name}"]`)) : lineItem.querySelector(`[name="${name}"]`).focus();
          } else if (parsedState.item_count === 0 && cartDrawerWrapper) {
            trapFocus(cartDrawerWrapper, document.getElementById('CartDrawer-Heading'));
          }
          publish(PUB_SUB_EVENTS.cartUpdate, {source: 'cart-drawer'});
        }).catch(() => {
          const errors = document.getElementById('CartDrawer-CartErrors');
          errors.textContent = window.cartStrings.error;
        })
        .finally(() => {
          this.disableLoading(line);
        });
    }

    updateLiveRegions(line, message) {
      const lineItemError = document.getElementById(`CartDrawer-LineItemError-${line}`);
      if (lineItemError) lineItemError.querySelector('.cart-item__error-text').innerHTML = message;

      this.lineItemStatusElement.setAttribute('aria-hidden', true);

      const cartStatus = document.getElementById('CartDrawer-LiveRegionText');
      cartStatus.setAttribute('aria-hidden', false);

      setTimeout(() => {
        cartStatus.setAttribute('aria-hidden', true);
      }, 1000);
    }

    getSectionInnerHTML(html, selector) {
      return new DOMParser()
        .parseFromString(html, 'text/html')
        .querySelector(selector).innerHTML;
    }

    enableLoading(line) {
      const cartDrawerItems = document.getElementById('CartDrawer-CartItems');
      cartDrawerItems.classList.add('cart__items--disabled');

      const cartItemElements = this.querySelectorAll(`#CartDrawer-Item-${line} .loading-overlay`);
      [...cartItemElements].forEach((overlay) => overlay.classList.remove('hidden'));

      document.activeElement.blur();
      this.lineItemStatusElement.setAttribute('aria-hidden', false);
    }

    disableLoading(line) {
      const cartDrawerItems = document.getElementById('CartDrawer-CartItems');
      cartDrawerItems.classList.remove('cart__items--disabled');

      const cartItemElements = this.querySelectorAll(`#CartDrawer-Item-${line} .loading-overlay`);
      [...cartItemElements].forEach((overlay) => overlay.classList.add('hidden'));
    }
  }

  customElements.define('cart-drawer-items', CartDrawerItems);
</script>